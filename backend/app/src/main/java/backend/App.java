/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package backend;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.sql.Array;
import java.util.ArrayList;
import java.util.ConcurrentModificationException;
import java.util.Scanner;

import com.github.javaparser.StaticJavaParser;
import com.github.javaparser.ast.CompilationUnit;
import com.github.javaparser.ast.Node;
import com.github.javaparser.ast.expr.NameExpr;

public class App {

    public static void main(String[] args) throws FileNotFoundException {

        String file = new String("public static void main(String args[])");

        //main String args ])

        ArrayList<String> keywords = new ArrayList();
        keywords.add("public");
        keywords.add("static");
        keywords.add("void");


        ArrayList<String> rawTokens = new ArrayList();
        ArrayList<String> tokens = new ArrayList();

        ArrayList<String> sequencePattern = new ArrayList();

        Scanner scanner = new Scanner(file);

        while(scanner.hasNext())
        {
            rawTokens.add(scanner.next());
        }

        ArrayList<String> copyOfRawTokens = new ArrayList();



        for(String rawToken : rawTokens)
        {
            copyOfRawTokens.add(rawToken);
            for(String keyword : keywords)
            {
                if(rawToken.equals(keyword)){
                    String toAdd = "keywordToken" + keyword;
                    sequencePattern.add(toAdd);
                    copyOfRawTokens.remove(rawToken);
                }
            }

        }

        scanner.close();


        // for(String patternToken : sequencePattern)
        // {
        //     System.out.println(patternToken);
        // }

        for(String leftOverToken : copyOfRawTokens)
        {
            System.out.println(leftOverToken);
        }

        ArrayList<String> splitTokens = new ArrayList();

        for(String token : copyOfRawTokens)
        {
            
            if(Character.isLetter(token.charAt(0)))
            {
            
                for(int i = 0; i < token.length(); i++)
                {
                    if(!Character.isLetter(token.charAt(i)))
                    {
                        String myChar = "\\" + Character.toString(token.charAt(i));
                        Scanner scanner2 = new Scanner(token);
                        scanner2.useDelimiter(myChar);
                        
                        while(scanner2.hasNext())
                        {
                            splitTokens.add(scanner2.next());
                        }

                        scanner2.close();
                    }

                    
                }
            }
        }
            
      

        for(String tokens2 : splitTokens)
        {
            System.out.println(tokens2);
        }
    }
}
